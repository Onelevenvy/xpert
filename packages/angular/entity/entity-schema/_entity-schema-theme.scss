@use 'sass:map';
@use 'sass:color';
@use '@angular/material' as mat;

@mixin color($config-or-theme) {
  $config: mat.get-color-config($config-or-theme);
  $primary: map.get($config, primary);
  $accent: map.get($config, 'accent');

  .ngm-entity-schema {
    .mat-tree-node {
      padding-right: 1rem;

      .mat-icon-rtl-mirror {
        color: color.change(mat.get-color-from-palette($primary), $alpha: 0.3);
      }

      &.selected {
        background-color: color.change(mat.get-color-from-palette($primary), $alpha: 0.05);
      }

      &:hover {
        background-color: color.change(mat.get-color-from-palette($primary), $alpha: 0.1);
        color: mat.get-color-from-palette($primary);
      }
    }

    .ngm-entity-schema__type {
      display: inline-block;
      white-space: nowrap;
      // width: 16px;
      height: 16px;
      margin-right: 5px;
      font-size: 12px;
      font-weight: 500;
      color: mat.get-color-from-palette($accent);
      text-align: center;
      background-color: color.change(mat.get-color-from-palette($accent), $alpha: 0.1);
      border-radius: 3px;
      padding: 0 3px;
      max-width: 60px;
      overflow: hidden;
      text-overflow: ellipsis;
      // transform: scale(.7);
    }
  }

}

@mixin typography($config-or-theme) {
}

@mixin density($config-or-theme) {

}

@mixin theme($theme) {
  $color: mat.get-color-config($theme);
  $density: mat.get-density-config($theme);
  $typography: mat.get-typography-config($theme);

  @if $color != null {
    @include color($color);
  }
  @if $density != null {
    @include density($density);
  }
  @if $typography != null {
    @include typography($typography);
  }
}
