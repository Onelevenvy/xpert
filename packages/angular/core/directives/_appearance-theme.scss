@use 'sass:map';
@use 'sass:color';
@use '@angular/material' as mat;
@use '@angular/material' as theming;

// Applies a property to an mat-button element for each of the supported palettes.
@mixin _theme-property($theme, $property, $hue) {
  $primary: map.get($theme, primary);
  $accent: map.get($theme, accent);
  $warn: map.get($theme, warn);
  $background: map.get($theme, background);
  $foreground: map.get($theme, foreground);

  &.mat-primary {
    .mat-button-toggle.mat-button-toggle-checked {
      #{$property}: theming.get-color-from-palette($primary, $hue);
    }
  }
  &.mat-accent {
    .mat-button-toggle.mat-button-toggle-checked {
      #{$property}: theming.get-color-from-palette($accent, $hue);
    }
  }
  &.mat-warn {
    .mat-button-toggle.mat-button-toggle-checked {
      #{$property}: theming.get-color-from-palette($warn, $hue);
    }
  }
}

@mixin _theme-outline($theme, $border) {
  $primary: map.get($theme, primary);
  $accent: map.get($theme, accent);
  $warn: map.get($theme, warn);
  $background: map.get($theme, background);
  $foreground: map.get($theme, foreground);
  
  border: 1px #{$border} mat.get-color-from-palette($foreground, divider);

  &.mat-primary {
    border-color: theming.get-color-from-palette($primary, 100);
    background-color: color.change(theming.get-color-from-palette($primary), $alpha: 0.1);
    color: theming.get-color-from-palette($primary);
  }
  &.mat-accent {
    border-color: theming.get-color-from-palette($accent, 100);
    background-color: color.change(theming.get-color-from-palette($accent), $alpha: 0.1);
    color: theming.get-color-from-palette($accent);
  }
  &.mat-warn {
    border-color: theming.get-color-from-palette($warn, 100);
    background-color: color.change(theming.get-color-from-palette($warn), $alpha: 0.1);
    color: theming.get-color-from-palette($warn);
  }
}

@mixin color($config-or-theme) {
  $color-config: mat.get-color-config($config-or-theme);
  $primary: map.get($color-config, 'primary');
  $accent: map.get($color-config, 'accent');
  $warn: map.get($color-config, 'warn');
  $foreground: map.get($color-config, 'foreground');
  $background: map.get($color-config, background);

  .ngm-appearance-acrylic {
    position: relative;

    &::before {
      content: '';
      position: absolute;
      left: -8px;
      top: -8px;
      right: -8px;
      bottom: -8px;
      z-index: -1;
      background-blend-mode: exclusion;
      filter: blur(8px);
      -webkit-filter: blur(8px);
      filter: url(#blur);
      filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius='8');
    }

    &::after {
      // background-color: white;
      opacity: 0.5;
    }
  }

  // appearance dashed
  .mat-mdc-button-base,
  .mat-mdc-menu-item,
  .mat-mdc-option {
    &.ngm-appearance-dashed {
      border: 1px dashed mat.get-color-from-palette($foreground, divider);
    }
  }

  .mat-mdc-button-base:not(.mat-mdc-button-disabled),
  .mat-mdc-menu-item,
  .mat-mdc-option {
    &.ngm-appearance-dashed:hover,
    &.ngm-appearance-dashed:focus {
      border-color: #738187;
    }
  }

  .mat-mdc-divider.ngm-appearance-dashed {
    border-top-style: dashed;
  }

  // danger
  .mat-mdc-button-base,
  .mat-mdc-menu-item,
  .mat-mdc-option {
    &.ngm-appearance-danger:hover {
      color: mat.get-color-from-palette($warn);
      .mat-icon-no-color {
        color: mat.get-color-from-palette($warn);
      }
    }
  }

  .ngm-appearance-opacity {
    opacity: 0.5;
  }

  .mat-button-toggle-group.mat-button-toggle-group-appearance-standard {
    --border-radius: 1rem;
    --box-shadow-radius: 6px;
    border: unset;
    border-radius: var(--border-radius);
    overflow: visible;

    @include _theme-property($color-config, 'color', '500-contrast');
    @include _theme-property($color-config, 'background-color', 500);

    &:not(.mat-button-toggle-vertical) {
      .mat-button-toggle {
        &:first-child {
          border-top-left-radius: calc(var(--border-radius) - 3px);
          border-bottom-left-radius: calc(var(--border-radius) - 3px);
        }
        &:last-child {
          border-top-right-radius: calc(var(--border-radius) - 3px);
          border-bottom-right-radius: calc(var(--border-radius) - 3px);
        }
      }
    }
    &.mat-button-toggle-vertical {
      .mat-button-toggle {
        &:first-child {
          border-top-left-radius: calc(var(--border-radius) - 3px);
          border-top-right-radius: calc(var(--border-radius) - 3px);
        }
        &:last-child {
          border-bottom-left-radius: calc(var(--border-radius) - 3px);
          border-bottom-right-radius: calc(var(--border-radius) - 3px);
        }
      }
    }

    .mat-button-toggle {
      &:hover, 
      &.cdk-focused,
      &:active {
        box-shadow: rgb(143 155 179 / 16%) 0px 0px 0px var(--box-shadow-radius);
        z-index: 1;
      }
    }

    &.ngm-appearance-outline {
      --box-shadow-radius: 10px;
      border: 1px solid mat.get-color-from-palette($foreground, divider);
      padding: 3px;
    }
  }

  .ngm-density__compact .mat-button-toggle-group, .ngm-density__compact.mat-button-toggle-group{
    --border-radius: 10px;
    --box-shadow-radius: 5px;
    line-height: normal;
    .mat-button-toggle-label-content {
      line-height: 16px;
      font-size: .75em;
    }
  }

  .ngm-density__cosy .mat-button-toggle-group, .ngm-density__cosy.mat-button-toggle-group{
    --border-radius: 1rem;
    --box-shadow-radius: 6px;
    line-height: normal;
    .mat-button-toggle-label-content {
      line-height: 24px;
      font-size: .85em;
    }
  }

  .mat-chip-list {
    --box-shadow-radius: 6px;
    
    .mat-chip {
      &:hover, 
      &:focus,
      &:active {
        box-shadow: rgb(143 155 179 / 16%) 0px 0px 0px var(--box-shadow-radius);
        z-index: 1;
      }
    }

    &.ngm-appearance-outline {
      .mat-chip {
        @include _theme-outline($color-config, solid);
      }
    }

    &.ngm-appearance-dashed {
      .mat-chip {
        @include _theme-outline($color-config, dashed);
      }
    }
  }
}

@mixin density($config-or-theme) {
}

@mixin typography($config-or-theme) {
}

@mixin theme($theme) {
  $color: mat.get-color-config($theme);
  $density: mat.get-density-config($theme);
  $typography: mat.get-typography-config($theme);

  @if $color != null {
    @include color($color);
  }
  @if $density != null {
    @include density($density);
  }
  @if $typography != null {
    @include typography($typography);
  }
}
