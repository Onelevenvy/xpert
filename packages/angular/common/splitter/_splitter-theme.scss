@use 'sass:map';
@use 'sass:color';
@use '@angular/material' as mat;
@use '@angular/material/core/tokens/token-utils';
@use '@angular/material/core/style/sass-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (ngm, splitter);

@function get-unthemable-tokens() {
  @return (
  );
}

@function get-color-tokens() {
  @return (
    background-color: var(--ngm-color-outline-variant),
  );
}

@function get-token-slots() {
  @return sass-utils.deep-merge-all(
    get-unthemable-tokens(),
    get-color-tokens(),
  );
}

@mixin color($config-or-theme) {
  $config: mat.get-color-config($config-or-theme);
  $background: map.get($config, background);
  $foreground: map.get($config, foreground);
  $primary: map.get($config, primary);
  $accent: map.get($config, accent);

  $splitter-color: mat.get-color-from-palette($foreground, divider);
  $splitter-focus-color: mat.get-color-from-palette($accent, 500);

  @include token-utils.use-tokens($prefix, get-token-slots()) {
    .ngm-splitter-bar {
      background-color: var(#{token-utils.get-token-variable(background-color)});
    }
  }

  ngm-splitter {
    @include token-utils.create-token-values($prefix, get-token-slots());
  }

  %ngm-splitter-expander {
    position: relative;
    width: 0;
    height: 0;
    border-right: var(--splitter-size) solid transparent;
    border-left: var(--splitter-size) solid transparent;
    cursor: pointer;
    z-index: 1;
  }

  .ngm-splitter-bar-host {
    --splitter-size: 4px;
    --splitter-focus-color: #{$splitter-focus-color};

    &:focus {
      outline: transparent solid 1px;
      box-shadow: inset 0 0 0 1px var(--splitter-focus-color);
    }
  }

  .ngm-splitter-bar {
    position: relative;
    display: flex;
    flex-grow: 1;
    justify-content: center;
    align-items: center;
    z-index: 99;
    opacity: .68;
    transition: opacity .15s ease-out !important;

    &:hover {
      transition: all .25s ease-out;
      opacity: 1;
    }

    .ngm-splitter-bar__handle {
      background: $splitter-color;
      border-radius: 2px;
    }

    .ngm-splitter-bar__handle {
      width: 25%;
      height: var(--splitter-size);
      margin: 0 3rem;
    }

    .ngm-splitter-bar__expander--start {
      @extend %ngm-splitter-expander;
      border-bottom: var(--splitter-size) solid $splitter-color;
    }

    .ngm-splitter-bar__expander--end {
      @extend %ngm-splitter-expander;
      border-top: var(--splitter-size) solid $splitter-color;
    }

    &.ngm-splitter-bar--vertical {
      flex-direction: column;
      height: 100%;

      .ngm-splitter-bar__handle {
        width: var(--splitter-size);
        height: 25%;
        margin: 3rem 0;
      }

      .ngm-splitter-bar__expander--start {
        @extend %ngm-splitter-expander;
        border-top: var(--splitter-size) solid transparent;
        border-right: var(--splitter-size) solid $splitter-color;
        border-bottom: var(--splitter-size) solid transparent;
        border-left: unset;
      }

      .ngm-splitter-bar__expander--end {
        @extend %ngm-splitter-expander;
        border-top: var(--splitter-size) solid transparent;
        border-left: var(--splitter-size) solid $splitter-color;
        border-bottom: var(--splitter-size) solid transparent;
        border-right: unset;
      }
    }
  }
  
}
